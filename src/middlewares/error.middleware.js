const createError = require("http-errors");
const { ValidationError } = require("express-validation");
const { getFailureResponse } = require("../utils/response.util");

/**
 * Function to extract validation error message from the error object.
 *
 * @param {Object} errObject - The error object generated by express-validation.
 * @returns {string} - Extracted validation error message.
 */
function getValidationErrorMessage(errObject) {
  const { body, params, query } = errObject.details;
  return (
    params?.[0]?.message ||
    query?.[0]?.message ||
    body?.[0]?.message ||
    errObject.message
  );
}

/**
 * Middleware to handle 404 not found errors.
 *
 * If the requested resource is not found, this middleware creates a 404 error
 * and forwards it to the main error handler.
 *
 * @param {Object} req - The HTTP request object.
 * @param {Object} res - The HTTP response object.
 * @param {Function} next - The next middleware function.
 */
const notFoundError = (req, res, next) => {
  return next(createError.NotFound("Resource not found."));
};

/**
 * Main error handler middleware.
 *
 * This middleware handles all types of errors, setting appropriate status codes
 * and error messages. It also handles validation errors from express-validation
 * by extracting meaningful error messages.
 *
 * @param {Object} err - The error object.
 * @param {Object} req - The HTTP request object.
 * @param {Object} res - The HTTP response object.
 * @param {Function} next - The next middleware function.
 */
const mainErrorHandler = (err, req, res, next) => {
  let errStatus;
  let errMessage;
  if (err.status) {
    errStatus = err.status;
    errMessage = err.message;
  } else {
    errStatus = 500;
    errMessage = "Something went wrong";
  }
  
  // Handle validation errors specifically and set status to 400.
  if (err instanceof ValidationError) {
    errStatus = 400;
    errMessage = getValidationErrorMessage(err);
  }

  return res.status(errStatus).json(getFailureResponse(errMessage));
};

module.exports = {
  notFoundError,
  mainErrorHandler,
};
